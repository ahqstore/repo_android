{"appId":"f:com.amnesica.kryptey","appShortcutName":"KryptEY","appDisplayName":"KryptEY","authorId":"f:fdroid","releaseTagName":"","downloadUrls":{"1":{"installerType":"AndroidApkZip","asset":"","url":"https://f-droid.org/repo/com.amnesica.kryptey_24.apk"}},"install":{"win32":null,"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":{"assetId":1,"min_sdk":26,"abi":["Aarch64","Armv7","X86","X64"]}},"displayImages":[],"description":"Keyboard for secure E2EE communication through signal protocol in any messenger\nCommunicate securely and independent, regardless of the legal situation or whether messengers use E2EE. No server needed. #ChatKontrolleStoppen\n\n<b>Why KryptEY?</b>\nBreaking of end-to-end encryption (E2EE) by laws such as the planned EU chat control is an ongoing issue. Content in messengers that use E2EE, such as Whatsapp or Signal, could thus be monitored by third parties. E2EE is often, but not always, standard in messengers. There are proven methods for E2EE such as PGP. However, these methods are sometimes cumbersomely integrated and require a lot of effort to use.\n\nKryptEY is an Android keyboard that implements the Signal protocol. The keyboard works messenger-independently and both the X3DH Key Agreement Protocol and the Double Ratchet Algorithm work without a server, thus it enables a highly independent use of the protocol.\n\n<b>Features</b>\nBased upon Simple Keyboard ( https://github.com/rkkr/simple-keyboard ), KryptEY adds a view above the Keyboard for the E2EE functionality.\n\n* use E2EE through Signal Protocol in any messenger\n* encryption/decryption of messages\n* enter message through separate text field in keyboard\n* use clipboard to read messages\n* manage contacts in own contact list in keyboard\n* message log to view sent/received messages\n* send messages as plain JSON (raw mode) or hidden in a decoy text (fairytale mode)\n* verification of E2EE functionality via fingerprint\n* Q&A View for questions\n* dark & light theme\n\nSee https://github.com/amnesica/KryptEY/blob/master/KRYPTEY.md for further information on how KryptEY is working.\n\n<b>Security</b>\nThe existing security properties for the Signal Protocol are also valid for the keyboard.\n\n<b>Limitations</b>\nThe keyboard was designed as a POC and only allows 1-to-1 conversations. However, the application can also be used in a group chat to a limited extent. Here, a message can be directed to a specific chat partner and not to all people. Other participants of the group chat cannot decrypt the message.\n\nText messages in Telegram are getting copied as HTML and not as plain text. When decoding the message with the fairytale mode the copied message is compromised and can't be read properly. Therefore, it can't be decoded at all. However, the raw mode works properly. When using KryptEY with Telegram we recommend the raw mode.\n\nSome messengers like Threema only allows up to 3500 bytes per message. Therefore, different character input limitations apply. To stay under the 3500 bytes limit, only 500 characters are allowed for raw and fairytale mode. For convenience these limitation applies for all messengers.\n\n<b>Demo</b>\nFor a demonstration on how KryptEY is used see https://github.com/amnesica/KryptEY/tree/master#demo \n\nKryptEY was created by mellitopia and amnesica. The code is open source and can be found at https://github.com/amnesica/KryptEY\n","repo":{"author":"amnesica","repo":"https://github.com/amnesica/KryptEY"},"version":"8011876dfdab6bcca9d0baf00914bc90b555f84fca8d9966082c3998967e5679","site":null,"source":"https://github.com/amnesica/KryptEY","license_or_tos":"GPL-3.0-only","resources":{"0":[104,116,116,112,115,58,47,47,102,45,100,114,111,105,100,46,111,114,103,47,114,101,112,111,47,99,111,109,46,97,109,110,101,115,105,99,97,46,107,114,121,112,116,101,121,47,101,110,45,85,83,47,105,99,111,110,95,87,103,98,52,75,70,97,54,120,83,51,104,49,112,54,50,102,72,81,56,49,86,115,48,69,110,48,101,100,99,98,75,69,55,99,102,70,114,57,117,108,113,77,61,46,112,110,103]},"verified":false}