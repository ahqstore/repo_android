{"appId":"f:io.gitlab.cryptographic_id","appShortcutName":"Cryptographic ID","appDisplayName":"Cryptographic ID","authorId":"f:fdroid","releaseTagName":"","downloadUrls":{"1":{"installerType":"AndroidApkZip","asset":"","url":"https://f-droid.org/repo/io.gitlab.cryptographic_id_17.apk"}},"install":{"win32":null,"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":{"assetId":1,"min_sdk":21,"abi":["Aarch64","Armv7","X64"]}},"displayImages":[],"description":"Attest the trustworthiness of a device using asymmetric cryptography\nUse cases:\n\n- Attest the state of a Linux computer\n\nWhen your computer is in a trustworthy state, you can generate a private key hidden in the TPM2 of your computer. This private key can be sealed with the current state of the computer (PCRs). Then the computer can only sign a message with this key when it is in the correct state according to the PCRs. For example, you can seal the key against the secure boot state (PCR7). If your computer is booting an operating system signed by another vendor, the TPM2 cannot unseal the private key. So if your computer can generate a correct signature, it is in this known state. You can create a sealed private key and create such a signature with cryptographic-id-rs (https://gitlab.com/cryptographic_id/cryptographic-id-rs). This is similar to tpm2-totp (https://github.com/tpm2-software/tpm2-totp) but uses asymmetric cryptography. This means you do not need to keep the verification code secure. You can share it safely with the world.\n\n- Verify the identity of a phone\n\nYou can generate a private key when your phone is in a trustworthy state. If your phone can create a correct signature, you know it is the same phone. Since the operating system can access the private key, the security guarantees are much weaker than with a TPM2. So the verification is just as secure as your phone. If you use Graphene OS, also have a look at Auditor (https://attestation.app/tutorial).\n\n- Verify that a person is in possession of a private key\n\nThis works as well as the section above but has the same shortcomings. It can be used to verify someone in person when he sends his public key to you in advance over a secure channel.\n","repo":{"author":"Unknown","repo":"https://gitlab.com/cryptographic_id/cryptographic-id-flutter"},"version":"17ed6a9eac3fa87969a7687c7e8c36784b2c652d75fd77d490ea37a145b401a7","site":null,"source":"https://gitlab.com/cryptographic_id/cryptographic-id-flutter","license_or_tos":"MIT","resources":{"0":[104,116,116,112,115,58,47,47,102,45,100,114,111,105,100,46,111,114,103,47,114,101,112,111,47,105,111,46,103,105,116,108,97,98,46,99,114,121,112,116,111,103,114,97,112,104,105,99,95,105,100,47,101,110,45,85,83,47,105,99,111,110,95,87,45,81,80,86,117,116,73,88,105,67,75,50,89,49,90,105,56,55,77,80,81,101,48,101,111,65,85,88,66,57,104,89,106,51,78,66,79,68,50,75,85,73,61,46,112,110,103]},"verified":false}